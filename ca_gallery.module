<?php
/**
 * @file
 * Code for the CA Gallery feature.
 */

include_once('ca_gallery.features.inc');

/**
 * Implements hook_menu()
 */
function ca_gallery_menu() {
  $items['admin/config/worx_features/gallery'] = array(
    'title' => 'Gallery Configuration',
    'description' => 'Override settings for ca_gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ca_gallery_settings_form'),
    'access arguments' => array('worx features admin'),
    'file' => 'ca_gallery.admin.inc',
    'file path' => drupal_get_path('module', 'ca_gallery'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/worx_features/gallery/general'] = array(
    'title' => 'General Settings',
    'description' => 'Override settings for ca_gallery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ca_gallery_settings_form'),
    'access arguments' => array('worx features admin'),
    'file' => 'ca_gallery.admin.inc',
    'file path' => drupal_get_path('module', 'ca_gallery'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * implements hook_menu_alter().
 */
function ca_gallery_menu_alter(&$items) {
  $items['gallery']['title'] = variable_get('ca_gallery_menu_title', 'Gallery');
}

/**
 * Implements hook_panels_pre_render().
 */
function ca_gallery_panels_pre_render($panel, $renderer) {
  foreach ($panel->content as $key => $value) {
    if ($value->subtype == 'ca_gallery_list-ca_gallery_list_1') {
      $panel->title = variable_get('ca_gallery_panel_title', 'Gallery');
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ca_gallery_views_pre_view(&$view, &$display_id, &$args) {
  if ($display_id == 'ca_gallery_list_1') {
    $view->set_items_per_page(variable_get('ca_gallery_list_count', 16));
  }
  if ($display_id == 'ca_gallery_sub_list_1') {
    $view->set_items_per_page(variable_get('ca_gallery_sublist_count', 4));
  }
  if ($display_id == 'ca_gallery_image_list_1') {
    $view->set_items_per_page(variable_get('ca_gallery_image_list_count', 16));
  }
}

/**
* Implementation of hook_ctools_plugin_directory()
*/
function ca_gallery_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_token_info().
 */
function ca_gallery_token_info() {
  
  // Define token value, gallery_category_hierarchy is the token will be used as [node:gallery_category_hierarchy]
  $data['tokens']['node']['gallery_category_hierarchy'] = array(
    'name' => t("Gallery category hierarchy"),
    'description' => t("Hierachy path of the category"),
  );
  
  // Define token value, gallery_image_path is the token will be used as [node:gallery_image_path]
  $data['tokens']['node']['gallery_image_path'] = array(
    'name' => t("Gallery category path"),
    'description' => t("The path of the category the image is located at"),
  );
  
  // Return associative array of tokens & token types
  return $data;
}

/**
 * Implements hook_tokens().
 */
function ca_gallery_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  // Check if token type is node
  if($type == 'node'){
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Check token is gallery_category_hierarchy
        case 'gallery_category_hierarchy':
          $cateparent =  $data['node']->field_ca_gallery_parent_gallery;
          //print_r($data['node']);
          $search  = array(' w/', '/');
          $replace = array(' ', '-');
          if ($cateparent[LANGUAGE_NONE] != NULL) {
            $x = $cateparent[LANGUAGE_NONE][0]['target_id'];
            while ($x > 0) {
              $node = node_load($x);
              $nodetitlefix = str_replace($search, $replace, $node->title);
              if (isset($replacements[$original])) {
                $replacements[$original] = $nodetitlefix . '/' . $replacements[$original];
              } else {
                $replacements[$original] = $nodetitlefix;
              }
              //print_r('Category Path ' . $replacements[$original]);
              $cateparent =  $node->field_ca_gallery_parent_gallery;
              //print_r('Category Parent ' . $cateparent);
              if ($cateparent != NULL) {
                $x = $cateparent[LANGUAGE_NONE][0]['target_id'];
              } else {
                break;
              }
            }
          }
          //print_r('Category Path ' . $replacements[$original]);
          break;
        // Check token is gallery_image_path
        case 'gallery_image_path':
          $category =  $data['node']->field_ca_gallery_image_parent[LANGUAGE_NONE][0]['target_id'];
          //print_r($data['node']);
          $nodepath = 'node/' . $category;
          $path = drupal_get_path_alias($nodepath);
          //print_r($path);
          $replacements[$original] = $path;
          break;
      }
    }
  }
  return $replacements;
}
